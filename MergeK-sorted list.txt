/* Merging of K-sorted Linklist
struct ListNode{                --------------structure of Node
     int val;
     ListNode *next;
   };

struct minvalueNode{                                    -----------return node having min. value 
   bool operator()(ListNode *a, ListNode *b)
      {
         return a->val > b->val;
       }
};

ListNode mergeList(vector<ListNode*> &A)
{
 priority_queue<ListNode*, vector<ListNode*>, minvalueNode> p;      ------------------Priority queue to implement Min Heap
  for(int i=0;i<A.size();i++)                                       ----------Insert first smallest node of each List
  p.push(A[i]);
  
  ListNode *head=NULL,*next;
  while(!p.empty())
  {
    ListNode *top=p.top();                                     ----------Get the smallest Node among K and insert next from removed list
    p.pop();
    if(top->next)
    p.push(top->next);
    if(head==NULL)
    {
     head=top;
     next=head;
     }
     else
     {
     next->next=top;
     next=top;
     }
}
return head;
}
